{"version":3,"sources":["services/numbersService.js","App.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","console","log","delete","put","Person","props","ListGroupItem","name","number","Button","className","type","onClick","messege","window","confirm","numbersService","then","response","setErrorMessage","setTimeout","setPersons","data","length","catch","error","PersonsListForm","ListGroup","filteredPersons","map","person","Filter","Form","Group","Label","Control","placeholder","value","newFilter","onChange","filterMuuttuu","PersonForm","onSubmit","addNote","newName","nimiMuuttuu","newNumber","numeroMuuttuu","Notification","message","App","useState","persons","setNewName","setNewNumber","setNewFilter","errorMessage","useEffect","filter","toLocaleLowerCase","includes","toLowerCase","event","target","preventDefault","nimet","yksittainen","lisattavaperson","lisattavanID","haeid","concat","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3edbea31.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n//Tämä komponentti vastaa REST kommunikoinnista tietokannan kanssa käyttäen AXIOSia\r\n//Axios on käytännössä siistinpi tapa tehdä fetch\r\n\r\n//palauttaa kaikki tiedot\r\nconst getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\n//luo uuden nimen ja numeron tietokantaan\r\nconst create = newObject => {\r\n  return axios.post(baseUrl, newObject)\r\n}\r\n\r\n//Päivittää annetun ID:n tiedot\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject)\r\n}\r\n\r\n//Poistaa annetun ID:n omaavan tiedon\r\nconst remove = (id) => {\r\n    console.log('Poistetaan käyttäjä ID:', id)\r\n    console.log('Osoitteesta', baseUrl,'/', id)\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\n//exportattavat funktiot\r\nexport default { \r\n  getAll: getAll, \r\n  create: create,\r\n  remove: remove,\r\n  update: update \r\n}","import React, { useState, useEffect } from 'react'\nimport numbersService from './services/numbersService'\nimport './index.css'\n\n//graafisten elementtien importtaaminen yksitellen, jotta käyttäjälle lähetetään mahdollisimman vähän tavaraa\nimport Button from 'react-bootstrap/Button';\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport ListGroupItem from 'react-bootstrap/ListGroupItem'\nimport Form from 'react-bootstrap/Form'\n\nconst App = () => {\n  //Sovelluksen tilan hallitsemiseen käytetyt muuttujat\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [newFilter, setNewFilter] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  //useEffect hakee sovelluksen tiedot JSON muodossa palvelimelta käyttäen numberService luokan axiosia\n  useEffect(() => {\n    console.log('effect alkaa')\n    numbersService\n      .getAll()\n      .then(response => {\n        console.log('effect -> promise fulfilled', response)\n        setPersons(response.data)\n      })\n  }, [])\n  console.log('Dataa löydetty:', persons.length, 'kpl')\n\n  //Handler filtterin päivittämistä varten\n  const filterMuuttuu = (event) => {\n    console.log('filtterikenttä muuttuu:', event.target.value)\n    setNewFilter(event.target.value)\n  }\n\n  //Handler tekstikentän päivittämistä varten\n  const nimiMuuttuu = (event) => {\n    console.log('tekstikenttä muuttuu:', event.target.value)\n    setNewName(event.target.value)\n\n  }\n\n  //Handler numerokentän päivittämistä varten\n  const numeroMuuttuu = (event) => {\n    console.log('numerokenttä muuttuu:', event.target.value)\n    setNewNumber(event.target.value)\n\n  }\n\n  //Ihmislistan filtteröiminen annetulla filtterillä caseINsensitiivisesti\n  const filteredPersons = persons.filter(person => {\n    return person.name.toLocaleLowerCase().includes(newFilter.toLowerCase())\n  })\n\n  //Handler nimen ja numeron lisäämiselle tietokantaan\n  const addNote = (event) => {\n    event.preventDefault()\n    console.log('Saatu sisältö', newName)\n\n    //tämän simppelin rivin naputteluun meni liian kauan\n    //Ottaa kaikki moniulotteisen listan name-tiedot ja tiivistää ne yhteen yksiulotteiseen listaan\n    const nimet = persons.map(yksittainen => yksittainen.name)\n\n    console.log('Nimien listassa nyt:', nimet)\n\n    //uunen henkilön tietojen atribuutit\n    const lisattavaperson = {\n      name: newName,\n      number: newNumber\n    }\n\n    //jos nimi ei ole vielä listassa\n    if (!nimet.includes(newName)) {\n      console.log('Pusketaan listaan seuraavat tiedot severille: ', lisattavaperson)\n\n      //lähetetään uusi persons-tieto palvelimelle\n      numbersService\n        .create(lisattavaperson)\n        .then(response => {\n          setPersons(persons.concat(response.data))\n          console.log('Palvelin vastasi uuteen tietoon:', response)\n          //tyhjennetään kentät\n          setNewName('')\n          setNewNumber('')\n\n          //tulostetaan ilmoitus onnistuneesta lisäyksestä, kesto 5s\n          setErrorMessage(\n            `Added ${lisattavaperson.name}`\n          )\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n        })\n      console.log('Listassa nyt: ', persons)\n    }\n\n    //2.18 nimi on jo listassa, tarjotaan mahdollisuutta päivittää se\n    else {\n      //jos ikkunasta klikataan OK, lähetetään numberService komponentille Axionille PUT update käsky\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n\n        //tämän rivin kirjoittamiseen meni liian kauan\n        const lisattavanID = persons.filter(haeid => haeid.name === lisattavaperson.name)\n\n        //päivitetään vanha tieto\n        numbersService\n          .update(lisattavanID[0].id, lisattavaperson)\n          .then(response => {\n            console.log('Palvelin vastasi uuteen tietoon:', response)\n\n            //tyhjennetään kentät\n            setNewName('')\n            setNewNumber('')\n\n            //päivitetään lista muutoksen jälkeen\n            numbersService\n              .getAll()\n              .then(response => {\n                console.log('effect -> promise fulfilled', response)\n                setPersons(response.data)\n              })\n            console.log('Dataa löydetty 3:', persons.length, 'kpl')\n\n\n            //tulostetaan ilmoitus onnistuneesta tiedon muuttamisesta\n            setErrorMessage(\n              `Updated number for ${lisattavaperson.name}`\n            )\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 5000)\n          })\n      }\n    }\n\n  }\n\n  //varsinaisen rungon tulostus\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification message={errorMessage} />\n      <Filter newFilter={newFilter} filterMuuttuu={filterMuuttuu} />\n      <h2>Add a new</h2>\n      <PersonForm addNote={addNote} newName={newName} nimiMuuttuu={nimiMuuttuu} newNumber={newNumber} numeroMuuttuu={numeroMuuttuu} />\n      <h2>Numbers</h2>\n      <PersonsListForm filteredPersons={filteredPersons} setErrorMessage={setErrorMessage} setPersons={setPersons} />\n      <a href=\"https://github.com/Totalderp/Phonebook\" >Source code on GitHub</a>\n    </div>\n  )\n}\n\n//Person komponentti. Tulostaa yhden ainoa ihmisen tiedot, sekä poistamiseen käytetty painike\nconst Person = (props) => {\n  return (<ListGroupItem key={props.id}>{props.name}: {props.number}\n    <Button className=\"numberButton\" type=\"submit\" onClick={() => {\n      const messege = 'Delete ' + props.name\n      console.log(messege)\n      if (window.confirm(messege)) {\n        //jos ikkunasta klikataan OK, lähetetään numberService komponentille Axionille delete käsky\n        console.log('Klikattu poista henkilöön:', props.name, 'jonka ID on', props.id)\n        numbersService\n          .remove(props.id)\n          .then(response => {\n            console.log('Palvelin vastasi uuteen tietoon:', response)\n\n            //tulostetaan ilmoitus tiedon onnistuneesta poistamisesta\n            props.setErrorMessage(\n              `Deleted ${props.name}`\n            )\n            setTimeout(() => {\n              props.setErrorMessage(null)\n            }, 5000)\n\n            //uudelleen ohjaa sivunlataus, jotta lista päivittyy\n            console.log('effect alkaa')\n            numbersService\n              .getAll()\n              .then(response => {\n                console.log('päivitetään', response)\n                props.setPersons(response.data)\n              })\n\n            console.log('Dataa löydetty:', response.length, 'kpl')\n          })\n\n          //kriittisen virheen tulostamiseen käytetty luokka\n          .catch(error => {\n            console.log('Virhe poistaessa, tulostetaan virheilmoitus')\n            props.setErrorMessage(\n              `Name and number were already removed from server`\n            )\n            setTimeout(() => {\n              props.setErrorMessage(null)\n            }, 5000)\n          })\n      }\n    }\n    }>Delete</Button></ListGroupItem>)\n}\n\n//Person-komponentin kattokomponentti. Valmistaa kaikki listan henkilöt tulostamista varten\nconst PersonsListForm = (props) => {\n  console.log('Tulostetaan Ihmisten hallintaan käytetty lista', props)\n  return (\n    <ListGroup>\n      {props.filteredPersons.map(person =>\n        <Person key={person.id} name={person.name} number={person.number} id={person.id} setErrorMessage={props.setErrorMessage} setPersons={props.setPersons} />\n      )}</ListGroup>\n  )\n}\n\n//Filter vastaa filter-kentän ja tekstin tulostamisesta\nconst Filter = (props) => (\n  <Form>\n    <Form.Group>\n      <Form.Label>Search:</Form.Label>\n      <Form.Control type=\"text\" placeholder=\"Search users by name\" value={props.newFilter} onChange={props.filterMuuttuu} />\n    </Form.Group>\n  </Form>\n)\n\n//PersonForm vastaa numero ja nimikentän + add-napin tulostamisesta\nconst PersonForm = (props) => (\n  <Form onSubmit={props.addNote}>\n    <Form.Group>\n      <Form.Label>Name:</Form.Label>\n      <Form.Control type=\"text\" placeholder=\"Enter new name\" value={props.newName} onChange={props.nimiMuuttuu} />\n    </Form.Group>\n    <Form.Group>\n      <Form.Label>Number:</Form.Label>\n      <Form.Control type=\"text\" placeholder=\"Enter new number\" value={props.newNumber} onChange={props.numeroMuuttuu} />\n    </Form.Group>\n    <Form.Group>\n      <Button className=\"filterButton\" type=\"submit\">Submit</Button>\n    </Form.Group>\n  </Form>\n)\n\n//Ilmoitusten tulostamiseen käytetty komponentti. Saa parametrinä tulostettavan viestin\nconst Notification = ({ message }) => {\n  //Mikäli viestikentän tulee olla tyhjänä\n  if (message === null) {\n    return null\n  }\n  //Virhetilannetta varten varattu viesti\n  else if (message === `Name and number were already removed from server`) {\n    return (\n      <div className=\"fail\">\n        {message}\n      </div>\n    )\n  }\n\n  //tavallisen ilnmoituksen (poisto, lisäys ja päivitys) tulostaminen\n  return (\n    <div className=\"success\">\n      {message}\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}